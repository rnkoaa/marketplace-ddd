plugins {
    id 'java'
    id 'idea'
}

group 'com.marketplace'
version '1.0.0-SNAPSHOT'

repositories {
    mavenLocal()
    mavenCentral()
}

sourceSets {
    main {
        java.srcDirs += "$buildDir/generated/sources/annotationProcessor/java"
    }
    funcTest {
        java.srcDir "$projectDir/src/funcTest/groovy"
        resources.srcDir "$projectDir/src/funcTest/resources"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

idea {
    module {
        testSourceDirs += sourceSets.funcTest.java.srcDirs
        testResourceDirs += sourceSets.funcTest.resources.srcDirs
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    funcTestImplementation {
        extendsFrom testImplementation
    }
    funcTestRuntime {
        extendsFrom testRuntimeClasspath
    }
}

dependencies {
    implementation project(":libs:config")
    implementation project(":libs:common")

    compileOnly 'org.immutables:value:2.8.8'
    annotationProcessor 'org.immutables:value:2.8.8'

    implementation("com.squareup.okhttp3:okhttp:4.9.0")
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-jackson:2.9.0'

    implementation("javax.inject:javax.inject:1")
    implementation("com.google.dagger:dagger:2.29.1")
    annotationProcessor 'com.google.dagger:dagger-compiler:2.29.1'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    funcTestImplementation(platform("org.junit:junit-bom:${junitVersion}"))
    funcTestImplementation('org.junit.jupiter:junit-jupiter')
    funcTestImplementation("org.assertj:assertj-core:${assertjVersion}")
    funcTestImplementation("org.mockito:mockito-core:${mockitoVersion}")
    funcTestImplementation("org.mockito:mockito-junit-jupiter:${mockitoVersion}")
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}


task functionalTest(type: Test) {
    testClassesDirs = sourceSets.funcTest.output.classesDirs
    classpath = sourceSets.funcTest.runtimeClasspath
}

functionalTest {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

check.dependsOn functionalTest

processFuncTestResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.withType(JavaCompile) {
    options.compilerArgs += "--enable-preview"
}
tasks.withType(Test) {
    jvmArgs += "--enable-preview"
}
tasks.withType(JavaExec) {
    jvmArgs += "--enable-preview"
}