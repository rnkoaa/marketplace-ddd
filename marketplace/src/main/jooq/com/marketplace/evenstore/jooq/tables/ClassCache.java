/*
 * This file is generated by jOOQ.
 */
package com.marketplace.evenstore.jooq.tables;


import com.marketplace.evenstore.jooq.DefaultSchema;
import com.marketplace.evenstore.jooq.Keys;
import com.marketplace.evenstore.jooq.tables.records.ClassCacheRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClassCache extends TableImpl<ClassCacheRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>class_cache</code>
     */
    public static final ClassCache CLASS_CACHE = new ClassCache();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClassCacheRecord> getRecordType() {
        return ClassCacheRecord.class;
    }

    /**
     * The column <code>class_cache.id</code>.
     */
    public final TableField<ClassCacheRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>class_cache.class_name</code>.
     */
    public final TableField<ClassCacheRecord, String> CLASS_NAME = createField(DSL.name("class_name"), SQLDataType.CLOB.nullable(false), this, "");

    private ClassCache(Name alias, Table<ClassCacheRecord> aliased) {
        this(alias, aliased, null);
    }

    private ClassCache(Name alias, Table<ClassCacheRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>class_cache</code> table reference
     */
    public ClassCache(String alias) {
        this(DSL.name(alias), CLASS_CACHE);
    }

    /**
     * Create an aliased <code>class_cache</code> table reference
     */
    public ClassCache(Name alias) {
        this(alias, CLASS_CACHE);
    }

    /**
     * Create a <code>class_cache</code> table reference
     */
    public ClassCache() {
        this(DSL.name("class_cache"), null);
    }

    public <O extends Record> ClassCache(Table<O> child, ForeignKey<O, ClassCacheRecord> key) {
        super(child, key, CLASS_CACHE);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ClassCacheRecord> getPrimaryKey() {
        return Keys.PK_CLASS_CACHE;
    }

    @Override
    public List<UniqueKey<ClassCacheRecord>> getKeys() {
        return Arrays.<UniqueKey<ClassCacheRecord>>asList(Keys.PK_CLASS_CACHE);
    }

    @Override
    public ClassCache as(String alias) {
        return new ClassCache(DSL.name(alias), this);
    }

    @Override
    public ClassCache as(Name alias) {
        return new ClassCache(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ClassCache rename(String name) {
        return new ClassCache(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClassCache rename(Name name) {
        return new ClassCache(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
