plugins {
    id 'java'
    id 'idea'
    id 'nu.studer.jooq'
    id "org.flywaydb.flyway"
}

group 'com.marketplace'
version '1.0.0-SNAPSHOT'

repositories {
    mavenLocal()
    mavenCentral()
}

sourceSets {
    main {
        java.srcDirs += "$buildDir/generated/sources/annotationProcessor/java"
    }
    intTest {
        java.srcDir "$projectDir/src/intTest/groovy"
        resources.srcDir "$projectDir/src/intTest/resources"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

idea {
    module {
        testSourceDirs += sourceSets.intTest.java.srcDirs
        testResourceDirs += sourceSets.intTest.resources.srcDirs
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    intTestImplementation {
        extendsFrom testImplementation
    }
    intTestRuntime {
        extendsFrom testRuntimeClasspath
    }

    flywayMigration
}

dependencies {
    implementation project(":libs:config")
    implementation project(":libs:common")
    implementation project(":libs:cqrs-domain")
    implementation project(":eventstore")
    implementation project(":eventstore-sqlite")

    implementation "org.flywaydb:flyway-core:$flywayVersion"
    flywayMigration "org.xerial:sqlite-jdbc:$sqliteVersion"

    implementation "org.xerial:sqlite-jdbc:$sqliteVersion"

    jooqGenerator "org.xerial:sqlite-jdbc:$sqliteVersion"
    jooqGenerator "org.jooq:jooq-meta-extensions:$jooqVersion"

    implementation("org.apache.logging.log4j:log4j-slf4j-impl:2.9.0")

    intTestImplementation("org.slf4j:slf4j-api:1.7.30")
    intTestImplementation("org.slf4j:slf4j-log4j12:1.7.30")

    implementation("com.sparkjava:spark-core:2.9.3") {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }

    compileOnly 'org.immutables:value:2.8.8'
    annotationProcessor 'org.immutables:value:2.8.8'

    implementation("com.google.guava:guava:30.0-jre")

    // some functional implementations
    implementation("io.vavr:vavr:${vavrVersion}")

    // Runtime reflections
    implementation("org.reflections:reflections:0.9.12")

    // 2.11.3
    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    implementation "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion"
    implementation "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"
    // immutables-java uses guava ImmutableList under the hood
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-guava:$jacksonVersion"

    implementation("javax.inject:javax.inject:1")
    implementation("javax.persistence:javax.persistence-api:2.2")

    implementation("com.google.dagger:dagger:${daggerVersion}")
    annotationProcessor("com.google.dagger:dagger-compiler:${daggerVersion}")

    testImplementation(platform("org.junit:junit-bom:${junitVersion}"))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testImplementation("org.assertj:assertj-core:${assertjVersion}")
    testImplementation("org.mockito:mockito-core:${mockitoVersion}")
    testImplementation("org.mockito:mockito-junit-jupiter:${mockitoVersion}")
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs += "--enable-preview"
}
tasks.withType(Test) {
    jvmArgs += "--enable-preview"
}
tasks.withType(JavaExec) {
    jvmArgs += "--enable-preview"
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
}

integrationTest {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

check.dependsOn integrationTest

processIntTestResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
//
// https://flywaydb.org/documentation/usage/gradle/migrate
flyway {
    driver = 'org.sqlite.JDBC'
//    url = "jdbc:sqlite:~/markketplace/db/marketplace.db"
    url = "jdbc:sqlite:${projectDir}/src/main/resources/db/marketplace.db"
    locations = ["filesystem:${projectDir}/src/main/resources/db/migration"]
}

task deleteDb(type: Copy) {
    delete("src/main/resources/db/marketplace.db")
}

jooq {
    version = '3.14.7'  // the default (can be omitted)
    edition = nu.studer.gradle.jooq.JooqEdition.OSS  // the default (can be omitted)

    configurations {
        main {  // name of the jOOQ configuration
            generateSchemaSourceOnCompilation = true  // default (can be omitted)

            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc {
                    driver = 'org.sqlite.JDBC'
                    url = 'jdbc:sqlite:src/main/resources/db/marketplace.db'
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.sqlite.SQLiteDatabase'
                    }
                    generate {
                        relations = true
                        deprecated = false
                        records = true
                        javaTimeTypes = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'com.marketplace.evenstore.jooq'
                        directory = 'src/main/jooq'  // default (can be omitted)
                    }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
}

// after generating jooq configs, do not bring them here.
generateJooq {
    doLast {
        delete("src/main/resources/db/marketplace.db")
    }
}
generateJooq.dependsOn(flywayMigrate)

deleteDb.dependsOn(generateJooq)
