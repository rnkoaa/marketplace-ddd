/*
 * This file is generated by jOOQ.
 */
package com.marketplace.eventstore.jdbc.tables;


import com.marketplace.eventstore.jdbc.DefaultSchema;
import com.marketplace.eventstore.jdbc.Keys;
import com.marketplace.eventstore.jdbc.tables.records.UserProfileRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserProfile extends TableImpl<UserProfileRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>user_profile</code>
     */
    public static final UserProfile USER_PROFILE = new UserProfile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserProfileRecord> getRecordType() {
        return UserProfileRecord.class;
    }

    /**
     * The column <code>user_profile.id</code>.
     */
    public final TableField<UserProfileRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>user_profile.firstName</code>.
     */
    public final TableField<UserProfileRecord, String> FIRSTNAME = createField(DSL.name("firstName"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>user_profile.lastName</code>.
     */
    public final TableField<UserProfileRecord, String> LASTNAME = createField(DSL.name("lastName"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>user_profile.middleName</code>.
     */
    public final TableField<UserProfileRecord, String> MIDDLENAME = createField(DSL.name("middleName"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>user_profile.displayName</code>.
     */
    public final TableField<UserProfileRecord, String> DISPLAYNAME = createField(DSL.name("displayName"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>user_profile.photos</code>.
     */
    public final TableField<UserProfileRecord, String> PHOTOS = createField(DSL.name("photos"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>user_profile.created</code>.
     */
    public final TableField<UserProfileRecord, String> CREATED = createField(DSL.name("created"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>user_profile.updated</code>.
     */
    public final TableField<UserProfileRecord, String> UPDATED = createField(DSL.name("updated"), SQLDataType.CLOB.nullable(false), this, "");

    private UserProfile(Name alias, Table<UserProfileRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserProfile(Name alias, Table<UserProfileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>user_profile</code> table reference
     */
    public UserProfile(String alias) {
        this(DSL.name(alias), USER_PROFILE);
    }

    /**
     * Create an aliased <code>user_profile</code> table reference
     */
    public UserProfile(Name alias) {
        this(alias, USER_PROFILE);
    }

    /**
     * Create a <code>user_profile</code> table reference
     */
    public UserProfile() {
        this(DSL.name("user_profile"), null);
    }

    public <O extends Record> UserProfile(Table<O> child, ForeignKey<O, UserProfileRecord> key) {
        super(child, key, USER_PROFILE);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<UserProfileRecord> getPrimaryKey() {
        return Keys.PK_USER_PROFILE;
    }

    @Override
    public List<UniqueKey<UserProfileRecord>> getKeys() {
        return Arrays.<UniqueKey<UserProfileRecord>>asList(Keys.PK_USER_PROFILE);
    }

    @Override
    public UserProfile as(String alias) {
        return new UserProfile(DSL.name(alias), this);
    }

    @Override
    public UserProfile as(Name alias) {
        return new UserProfile(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserProfile rename(String name) {
        return new UserProfile(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserProfile rename(Name name) {
        return new UserProfile(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
