/*
 * This file is generated by jOOQ.
 */
package com.marketplace.eventstore.jdbc.tables;


import com.marketplace.eventstore.jdbc.DefaultSchema;
import com.marketplace.eventstore.jdbc.Indexes;
import com.marketplace.eventstore.jdbc.Keys;
import com.marketplace.eventstore.jdbc.tables.records.ClassifiedAdRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClassifiedAd extends TableImpl<ClassifiedAdRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>classified_ad</code>
     */
    public static final ClassifiedAd CLASSIFIED_AD = new ClassifiedAd();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClassifiedAdRecord> getRecordType() {
        return ClassifiedAdRecord.class;
    }

    /**
     * The column <code>classified_ad.id</code>.
     */
    public final TableField<ClassifiedAdRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>classified_ad.approver</code>.
     */
    public final TableField<ClassifiedAdRecord, String> APPROVER = createField(DSL.name("approver"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>classified_ad.owner</code>.
     */
    public final TableField<ClassifiedAdRecord, String> OWNER = createField(DSL.name("owner"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>classified_ad.title</code>.
     */
    public final TableField<ClassifiedAdRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>classified_ad.text</code>.
     */
    public final TableField<ClassifiedAdRecord, String> TEXT = createField(DSL.name("text"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>classified_ad.status</code>.
     */
    public final TableField<ClassifiedAdRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>classified_ad.price</code>.
     */
    public final TableField<ClassifiedAdRecord, String> PRICE = createField(DSL.name("price"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>classified_ad.pictures</code>.
     */
    public final TableField<ClassifiedAdRecord, String> PICTURES = createField(DSL.name("pictures"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>classified_ad.created</code>.
     */
    public final TableField<ClassifiedAdRecord, String> CREATED = createField(DSL.name("created"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>classified_ad.updated</code>.
     */
    public final TableField<ClassifiedAdRecord, String> UPDATED = createField(DSL.name("updated"), SQLDataType.CLOB.nullable(false), this, "");

    private ClassifiedAd(Name alias, Table<ClassifiedAdRecord> aliased) {
        this(alias, aliased, null);
    }

    private ClassifiedAd(Name alias, Table<ClassifiedAdRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>classified_ad</code> table reference
     */
    public ClassifiedAd(String alias) {
        this(DSL.name(alias), CLASSIFIED_AD);
    }

    /**
     * Create an aliased <code>classified_ad</code> table reference
     */
    public ClassifiedAd(Name alias) {
        this(alias, CLASSIFIED_AD);
    }

    /**
     * Create a <code>classified_ad</code> table reference
     */
    public ClassifiedAd() {
        this(DSL.name("classified_ad"), null);
    }

    public <O extends Record> ClassifiedAd(Table<O> child, ForeignKey<O, ClassifiedAdRecord> key) {
        super(child, key, CLASSIFIED_AD);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_CLASSIFIED_AD_APPROVER_ID, Indexes.IDX_CLASSIFIED_AD_OWNER_ID);
    }

    @Override
    public UniqueKey<ClassifiedAdRecord> getPrimaryKey() {
        return Keys.PK_CLASSIFIED_AD;
    }

    @Override
    public List<UniqueKey<ClassifiedAdRecord>> getKeys() {
        return Arrays.<UniqueKey<ClassifiedAdRecord>>asList(Keys.PK_CLASSIFIED_AD);
    }

    @Override
    public List<ForeignKey<ClassifiedAdRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ClassifiedAdRecord, ?>>asList(Keys.FK_CLASSIFIED_AD_USER_PROFILE_1);
    }

    private transient UserProfile _userProfile;

    public UserProfile userProfile() {
        if (_userProfile == null)
            _userProfile = new UserProfile(this, Keys.FK_CLASSIFIED_AD_USER_PROFILE_1);

        return _userProfile;
    }

    @Override
    public ClassifiedAd as(String alias) {
        return new ClassifiedAd(DSL.name(alias), this);
    }

    @Override
    public ClassifiedAd as(Name alias) {
        return new ClassifiedAd(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ClassifiedAd rename(String name) {
        return new ClassifiedAd(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClassifiedAd rename(Name name) {
        return new ClassifiedAd(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<String, String, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
