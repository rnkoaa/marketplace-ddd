/*
 * This file is generated by jOOQ.
 */
package com.marketplace.eventstore.jdbc.tables;


import com.marketplace.eventstore.jdbc.DefaultSchema;
import com.marketplace.eventstore.jdbc.Indexes;
import com.marketplace.eventstore.jdbc.Keys;
import com.marketplace.eventstore.jdbc.tables.records.EventDataRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventData extends TableImpl<EventDataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>event_data</code>
     */
    public static final EventData EVENT_DATA = new EventData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventDataRecord> getRecordType() {
        return EventDataRecord.class;
    }

    /**
     * The column <code>event_data.id</code>.
     */
    public final TableField<EventDataRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>event_data.stream_id</code>.
     */
    public final TableField<EventDataRecord, String> STREAM_ID = createField(DSL.name("stream_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>event_data.aggregate_name</code>.
     */
    public final TableField<EventDataRecord, String> AGGREGATE_NAME = createField(DSL.name("aggregate_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>event_data.aggregate_id</code>.
     */
    public final TableField<EventDataRecord, String> AGGREGATE_ID = createField(DSL.name("aggregate_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>event_data.event_type</code>.
     */
    public final TableField<EventDataRecord, String> EVENT_TYPE = createField(DSL.name("event_type"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>event_data.event_version</code>.
     */
    public final TableField<EventDataRecord, Integer> EVENT_VERSION = createField(DSL.name("event_version"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>event_data.data</code>.
     */
    public final TableField<EventDataRecord, String> DATA = createField(DSL.name("data"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>event_data.created</code>.
     */
    public final TableField<EventDataRecord, String> CREATED = createField(DSL.name("created"), SQLDataType.CLOB.nullable(false), this, "");

    private EventData(Name alias, Table<EventDataRecord> aliased) {
        this(alias, aliased, null);
    }

    private EventData(Name alias, Table<EventDataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>event_data</code> table reference
     */
    public EventData(String alias) {
        this(DSL.name(alias), EVENT_DATA);
    }

    /**
     * Create an aliased <code>event_data</code> table reference
     */
    public EventData(Name alias) {
        this(alias, EVENT_DATA);
    }

    /**
     * Create a <code>event_data</code> table reference
     */
    public EventData() {
        this(DSL.name("event_data"), null);
    }

    public <O extends Record> EventData(Table<O> child, ForeignKey<O, EventDataRecord> key) {
        super(child, key, EVENT_DATA);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_EVENT_DATA_AGGREGATE_ID, Indexes.IDX_EVENT_DATA_AGGREGATE_NAME, Indexes.IDX_EVENT_DATA_STREAM_ID, Indexes.IDX_EVENT_DATA_STREAM_ID_VERSION);
    }

    @Override
    public UniqueKey<EventDataRecord> getPrimaryKey() {
        return Keys.PK_EVENT_DATA;
    }

    @Override
    public List<UniqueKey<EventDataRecord>> getKeys() {
        return Arrays.<UniqueKey<EventDataRecord>>asList(Keys.PK_EVENT_DATA);
    }

    @Override
    public EventData as(String alias) {
        return new EventData(DSL.name(alias), this);
    }

    @Override
    public EventData as(Name alias) {
        return new EventData(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EventData rename(String name) {
        return new EventData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventData rename(Name name) {
        return new EventData(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, String, String, String, String, Integer, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
