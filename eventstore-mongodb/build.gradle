plugins {
    id 'java'
    // which produces test fixtures
    id 'java-test-fixtures'

    id 'idea'
    id 'groovy'
}

group 'com.marketplace.eventstore.mongodb'
version '1.0.0-SNAPSHOT'

repositories {
    mavenCentral()
}

//
sourceSets {

    functional {
        groovy {
            srcDirs += "src/functional/groovy"
        }
        resources {
            srcDirs += "src/functional/resources"
        }

        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }

    functionalImplementation {
        extendsFrom testImplementation
        canBeResolved true
    }
    functionalRuntime.extendsFrom testRuntime
}

idea {
    module {
//        iml {
//            generateTo = file("$projectDir/.ideaproject/")
//        }
        testSourceDirs += file("src/functional/groovy")
        testResourceDirs += file("src/functional/resources")
        scopes.TEST.plus += [ configurations.functionalImplementation ]
    }
}

dependencies {
    compile project(":common")
    compile project(":eventstore")

    implementation("org.slf4j:slf4j-api:1.7.30")
    implementation("org.slf4j:slf4j-log4j12:1.7.30")

    // 2.11.3
    implementation("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
    implementation("com.fasterxml.jackson.core:jackson-core:$jacksonVersion")
    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion")
    implementation("com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion")

    implementation('org.mongodb:mongodb-driver-reactivestreams:1.13.1')

//    implementation("javax.inject:javax.inject:1")
    implementation("javax.persistence:javax.persistence-api:2.2")

    compileOnly 'org.immutables:value:2.8.8'
    annotationProcessor 'org.immutables:value:2.8.8'

    // Implementation dependencies are not leaked to consumers when building
    testFixturesImplementation 'org.immutables:value:2.8.8'
    testFixturesAnnotationProcessor('org.immutables:value:2.8.8')
    testFixturesImplementation("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
    testFixturesImplementation("com.fasterxml.jackson.core:jackson-core:$jacksonVersion")
    testFixturesImplementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion")
    testFixturesImplementation("com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion")
    testFixturesImplementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion")
    testFixturesImplementation('io.vavr:vavr:1.0.0-alpha-3')

    implementation 'io.projectreactor:reactor-core:3.4.0'
    implementation("com.google.guava:guava:30.0-jre")

    testImplementation(platform("org.junit:junit-bom:${junitVersion}"))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testImplementation("org.assertj:assertj-core:${assertjVersion}")
    testImplementation("org.mockito:mockito-core:${mockitoVersion}")
    testImplementation("org.mockito:mockito-junit-jupiter:${mockitoVersion}")
    testImplementation('io.projectreactor:reactor-test:3.4.0')

    testCompile project(":common-test")
    testCompile project(":config")
    testImplementation("org.testcontainers:junit-jupiter:1.15.0")
    testImplementation("org.testcontainers:mongodb:1.15.0")

    testImplementation("org.codehaus.groovy:groovy-all:2.5.13")
    testImplementation("org.spockframework:spock-core:1.2-groovy-2.5") {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs += "--enable-preview"
}

tasks.withType(Test) {
    jvmArgs += "--enable-preview"
}

tasks.withType(JavaExec) {
    jvmArgs += "--enable-preview"
}

//
task functionalTest(type: Test) {
    description 'Runs the functional tests.'
    testClassesDirs = sourceSets.functional.output.classesDirs
    classpath = sourceSets.functional.runtimeClasspath
    group = 'verification'

    // run the tests even if inputs have not changed
    outputs.upToDateWhen { false }
    mustRunAfter test
}

check.dependsOn functionalTest

