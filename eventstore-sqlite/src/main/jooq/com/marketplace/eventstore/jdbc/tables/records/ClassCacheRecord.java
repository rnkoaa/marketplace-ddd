/*
 * This file is generated by jOOQ.
 */
package com.marketplace.eventstore.jdbc.tables.records;


import com.marketplace.eventstore.jdbc.tables.ClassCache;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClassCacheRecord extends UpdatableRecordImpl<ClassCacheRecord> implements Record2<String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>class_cache.id</code>.
     */
    public ClassCacheRecord setId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>class_cache.id</code>.
     */
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>class_cache.class_name</code>.
     */
    public ClassCacheRecord setClassName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>class_cache.class_name</code>.
     */
    public String getClassName() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return ClassCache.CLASS_CACHE.ID;
    }

    @Override
    public Field<String> field2() {
        return ClassCache.CLASS_CACHE.CLASS_NAME;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getClassName();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getClassName();
    }

    @Override
    public ClassCacheRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public ClassCacheRecord value2(String value) {
        setClassName(value);
        return this;
    }

    @Override
    public ClassCacheRecord values(String value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ClassCacheRecord
     */
    public ClassCacheRecord() {
        super(ClassCache.CLASS_CACHE);
    }

    /**
     * Create a detached, initialised ClassCacheRecord
     */
    public ClassCacheRecord(String id, String className) {
        super(ClassCache.CLASS_CACHE);

        setId(id);
        setClassName(className);
    }
}
